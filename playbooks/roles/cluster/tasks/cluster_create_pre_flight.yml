---
  - name: Set AWS credentials
    set_fact:
      aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID' ) }}"
      aws_secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY' ) }}"

  - name: set domain variable
    set_fact:
      domain: "{% if cluster_type is undefined %}{{ dev_domain }}{% elif cluster_type=='POC' %}{{ poc_domain }}{% endif %}"

  - name: Set urls
    set_fact:
      base_cluster_url: "{{ oo_clusterid }}.{{ domain }}"
      apps_cluster_url: "apps.{{ oo_clusterid }}.{{ domain }}"

  - name: check s3 for certs
    aws_s3:
      bucket: "{{ cluster_backup_bucket_name }}"
      mode: list
      prefix: "certs/{{ oo_clusterid }}"
    register: bucket_result

  - name: Retrieve certs if they exist
    block:
      - file:
          path: "/tmp/{{ oo_clusterid }}/certs"
          state: directory
      - aws_s3:
          bucket: "{{ cluster_backup_bucket_name }}"
          mode: get
          object: "certs/{{ oo_clusterid }}/wildcard.{{ item }}"
          dest: "/tmp/{{ oo_clusterid }}/certs/wildcard.{{ item }}"
        with_items:
          - "{{ base_cluster_url }}.crt"
          - "{{ base_cluster_url }}.key"
          - "{{ apps_cluster_url }}.crt"
          - "{{ apps_cluster_url }}.key"
    when: bucket_result.s3_keys

  - name: Set Certificate variables
    stat:
      path: /tmp/{{ oo_clusterid }}/certs/wildcard.{{ base_cluster_url }}.crt
    register: crt_result

  - stat: path=/tmp/{{ oo_clusterid }}/certs/wildcard.{{ apps_cluster_url }}.crt
    register: app_crt_result

  - stat: path=/tmp/{{ oo_clusterid }}/certs/rootCA.pem
    register: rootca_result

  - name: Make sure account exists and has given contacts. We agree to TOS.
    acme_account:
        account_key_content: "{{ letsencrypt_private_key }}"
        state: present
        terms_agreed: yes
        acme_version: 2
        acme_directory: "https://acme-v02.api.letsencrypt.org/directory"
        contact:
        - mailto:integreatly-sre@redhat.com

  - name: Generate a private key and csr for the cluster cert
    block:
      - openssl_privatekey:
          path: /tmp/{{ oo_clusterid }}/certs/wildcard.{{ oo_clusterid }}.{{ domain }}.key
      - openssl_csr:
          privatekey_path: /tmp/{{ oo_clusterid }}/certs/wildcard.{{ base_cluster_url }}.key
          path: "/tmp/{{ oo_clusterid }}/certs/wildcard.{{ base_cluster_url }}.csr"
          common_name: "{{ base_cluster_url }}"
          subject_alt_name: 'DNS:{{ base_cluster_url }},DNS:*.{{ base_cluster_url }}'
    when: crt_result.stat.exists == false

  - name: Generate a private key and csr for the apps cert
    block:
      - openssl_privatekey:
          path: /tmp/{{ oo_clusterid }}/certs/wildcard.{{ apps_cluster_url }}.key
      - openssl_csr:
          privatekey_path: /tmp/{{ oo_clusterid }}/certs/wildcard.{{ apps_cluster_url }}.key
          path: "/tmp/{{ oo_clusterid }}/certs/wildcard.{{ apps_cluster_url }}.csr"
          common_name: "{{ apps_cluster_url }}"
          subject_alt_name: 'DNS:{{ apps_cluster_url }},DNS:*.{{ apps_cluster_url }}'
    when: app_crt_result.stat.exists == false

  #
  # Generate <clustername>.<domain> certs
  #

  - name: Generate "{{ oo_clusterid }}"."{{ domain }}" cert
    block:
      - acme_certificate:
          account_key_content: "{{ letsencrypt_private_key }}"
          account_email: "integreatly-sre@redhat.com"
          acme_version: 2
          src: /tmp/{{ oo_clusterid }}/certs/wildcard.{{ base_cluster_url}}.csr
          dest: /tmp/{{ oo_clusterid }}/certs/wildcard.{{ base_cluster_url }}.crt
          challenge: dns-01
          acme_directory: https://acme-v02.api.letsencrypt.org/directory
        register: base_cluster_challenge
      - set_fact:
          challenges:
          - "{{ base_cluster_challenge.challenge_data[base_cluster_url]['dns-01'].resource_value | regex_replace('^(.*)$', '\"\\1\"') }}"
          - "{{ base_cluster_challenge.challenge_data['*.' + base_cluster_url]['dns-01'].resource_value | regex_replace('^(.*)$', '\"\\1\"') }}"
      - set_fact:
          base_cluster_dns_challenge: "{{ challenges | join(',') }}"
      - route53:
          zone: "{{ domain }}"
          record: "{{ base_cluster_challenge.challenge_data[base_cluster_url]['dns-01'].record }}"
          type: TXT
          ttl: 60
          state: present
          value: "{{ base_cluster_dns_challenge }}"
          aws_access_key: "{{ dns_access_key | default(aws_access_key) }}"
          aws_secret_key: "{{ dns_secret_key | default(aws_secret_key) }}"
          wait: yes
        when: base_cluster_challenge is changed
      - acme_certificate:
          account_key_content: "{{ letsencrypt_private_key }}"
          account_email: "integreatly-sre@redhat.com"
          acme_version: 2
          src: /tmp/{{ oo_clusterid }}/certs/wildcard.{{ base_cluster_url }}.csr
          cert: /tmp/{{ oo_clusterid }}/certs/wildcard.{{ base_cluster_url }}.crt
          chain: /tmp/{{ oo_clusterid }}/certs/rootCA.pem
          challenge: dns-01
          acme_directory: https://acme-v02.api.letsencrypt.org/directory
          remaining_days: 60
          data: "{{ base_cluster_challenge }}"
      - route53:
          zone: "{{ domain }}"
          record: "{{ base_cluster_challenge.challenge_data[base_cluster_url]['dns-01'].record }}"
          value: "{{ base_cluster_dns_challenge }}"
          type: TXT
          ttl: 60
          state: absent
          aws_access_key: "{{ dns_access_key | default(aws_access_key) }}"
          aws_secret_key: "{{ dns_secret_key | default(aws_secret_key) }}"
          overwrite: true
    when: crt_result.stat.exists == false

  #
  # Generate apps.<clustername>.<domain> certs
  #

  - name: Generate apps."{{ oo_clusterid }}"."{{ domain }}" cert
    block:
      - acme_certificate:
          account_key_content: "{{ letsencrypt_private_key }}"
          account_email: "integreatly-sre@redhat.com"
          acme_version: 2
          src: /tmp/{{ oo_clusterid }}/certs/wildcard.{{ apps_cluster_url }}.csr
          dest: /tmp/{{ oo_clusterid }}/certs/wildcard.{{ apps_cluster_url }}.crt
          challenge: dns-01
          acme_directory: https://acme-v02.api.letsencrypt.org/directory
        register: apps_cluster_challenge
      - set_fact:
          challenges:
          - "{{ apps_cluster_challenge.challenge_data[apps_cluster_url]['dns-01'].resource_value | regex_replace('^(.*)$', '\"\\1\"') }}"
          - "{{ apps_cluster_challenge.challenge_data['*.' + apps_cluster_url]['dns-01'].resource_value | regex_replace('^(.*)$', '\"\\1\"') }}"
      - set_fact:
          apps_cluster_dns_challenge: "{{ challenges | join(',') }}"
      - route53:
          zone: "{{ domain }}"
          record: "{{ apps_cluster_challenge.challenge_data[apps_cluster_url]['dns-01'].record }}"
          type: TXT
          ttl: 60
          state: present
          value: "{{ apps_cluster_dns_challenge }}"
          aws_access_key: "{{ dns_access_key | default(aws_access_key) }}"
          aws_secret_key: "{{ dns_secret_key | default(aws_secret_key) }}"
          wait: yes
        when: apps_cluster_challenge is changed
      - acme_certificate:
          account_key_content: "{{ letsencrypt_private_key }}"
          account_email: "integreatly-sre@redhat.com"
          acme_version: 2
          src: /tmp/{{ oo_clusterid }}/certs/wildcard.{{ apps_cluster_url }}.csr
          cert: /tmp/{{ oo_clusterid }}/certs/wildcard.{{ apps_cluster_url }}.crt
          chain: /tmp/{{ oo_clusterid }}/certs/rootCA.pem
          challenge: dns-01
          acme_directory: https://acme-v02.api.letsencrypt.org/directory
          remaining_days: 60
          data: "{{ apps_cluster_challenge }}"
      - route53:
          zone: "{{ domain }}"
          record: "{{ apps_cluster_challenge.challenge_data[apps_cluster_url]['dns-01'].record }}"
          value: "{{ apps_cluster_dns_challenge }}"
          type: TXT
          ttl: 60
          state: absent
          aws_access_key: "{{ dns_access_key | default(aws_access_key) }}"
          aws_secret_key: "{{ dns_secret_key | default(aws_secret_key) }}"
          overwrite: true
    when: app_crt_result.stat.exists == false

  - name: Retrieve rootCA if it doesn't exist
    get_url:
      dest: "/tmp/{{ oo_clusterid }}/certs/rootCA.pem"
      url: https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem.txt
    when: rootca_result.stat.exists == false

  - name: Create a bucket for backups
    aws_s3:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      bucket: "{{ cluster_backup_integreatly_bucket_name }}"
      mode: create
      region: "{{ oo_sublocation }}"
    ignore_errors: yes

  - name: Backup certs to bucket
    aws_s3:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      bucket: "{{ cluster_backup_bucket_name }}"
      object: /certs/{{ oo_clusterid }}/wildcard.{{ item }}.crt
      src: /tmp/{{ oo_clusterid }}/certs/wildcard.{{ item }}.crt
      mode: put
    with_items:
      - "{{ apps_cluster_url }}"
      - "{{ base_cluster_url }}"

  - name: Backup keys to bucket
    aws_s3:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      bucket: "{{ cluster_backup_bucket_name }}"
      object: /certs/{{ oo_clusterid }}/wildcard.{{ item }}.key
      src: /tmp/{{ oo_clusterid }}/certs/wildcard.{{ item }}.key
      mode: put
    with_items:
      - "{{ apps_cluster_url }}"
      - "{{ base_cluster_url }}"